/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pizza;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vincent
 */
public class MainFrame extends javax.swing.JFrame {
    private int DISCONNECTED = 1;
    private int CONNECTED = 0;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        initComponents();
        //UIManager.setLookAndFeel( "com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pane = new javax.swing.JDesktopPane();
        login = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        Order = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        onSale = new javax.swing.JButton();
        bwReport = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        option = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        productManagement = new javax.swing.JMenuItem();
        customerManagement = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pizza Order System");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1366, 768));

        javax.swing.GroupLayout PaneLayout = new javax.swing.GroupLayout(Pane);
        Pane.setLayout(PaneLayout);
        PaneLayout.setHorizontalGroup(
            PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PaneLayout.setVerticalGroup(
            PaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );

        login.setText("Log In");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        jLabel1.setText("Welcome");
        jLabel1.setPreferredSize(new java.awt.Dimension(63, 23));

        nameLabel.setText("Guest");

        logout.setText("Log Out");
        logout.setMaximumSize(new java.awt.Dimension(63, 23));
        logout.setMinimumSize(new java.awt.Dimension(63, 23));
        logout.setPreferredSize(new java.awt.Dimension(63, 23));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        Order.setText("Order");
        Order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderActionPerformed(evt);
            }
        });

        userButton.setText("User Profile");
        userButton.setPreferredSize(new java.awt.Dimension(61, 23));
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.setPreferredSize(new java.awt.Dimension(87, 23));
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        onSale.setText("On Sale");
        onSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSaleActionPerformed(evt);
            }
        });

        bwReport.setText("Best/Worst Seller Report");
        bwReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwReportActionPerformed(evt);
            }
        });

        option.setText("Option");

        jMenu1.setText("Admin Setting");

        productManagement.setText("Product Management");
        productManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productManagementActionPerformed(evt);
            }
        });
        jMenu1.add(productManagement);

        customerManagement.setText("Customer Management");
        customerManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerManagementActionPerformed(evt);
            }
        });
        jMenu1.add(customerManagement);

        option.add(jMenu1);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        option.add(about);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        option.add(exitItem);

        jMenuBar1.add(option);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pane)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(Order, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(userButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(onSale, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(bwReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 362, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nameLabel))
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(registerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(onSale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bwReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pane)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // TODO add your handling code here:
        About a = new About();
        Pane.add(a);
        a.setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        JPanel loginPanel = new JPanel();
        JLabel username = new JLabel("Username: ");
        
        JLabel pass = new JLabel("Password: ");
        JPasswordField passText = new JPasswordField(10);
        loginPanel.add(username);
        loginPanel.add(this.userText);
        loginPanel.add(pass);
        loginPanel.add(passText);
        String[] options = new String[] {"Log in", "Cancel"};
        int option = JOptionPane.showOptionDialog(null, loginPanel, "Log In",
                JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "Cancel");
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < passText.getPassword().length; i++){
            result.append(passText.getPassword()[i]);
        }
        
        if (option == 0){
            try {
                DBConnection dbc = new DBConnection();
                Connection conn = dbc.connect();
                Statement st = conn.createStatement();
                Statement st2 = conn.createStatement();
                Statement delinquentCheck = conn.createStatement();
                String sql = "SELECT User.cid, addrId, COUNT(*) as result FROM Customers inner join User "
                        + "on User.cid=Customers.cid where username='"
                        + this.userText.getText().trim() + "' and password='" 
                        + result.toString() + "'";
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()){
                    if (rs.getInt("result") == 1){
                        this.status = "Log In";
                        this.cid = rs.getInt("cid");
                        this.addrId = rs.getInt("addrId");
                        st2.executeUpdate("Update User set LastLogin=now()"
                                +" where cid=" + this.cid);
                        checkLogin();
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Username/Password Wrong", "Login Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
                rs.close();
                st.close();
                dbc.disconnect();
            } catch (Exception e) {
                System.err.println("Cannot connect");
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_loginActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        this.status = "Not Log In";
        checkLogin();
    }//GEN-LAST:event_logoutActionPerformed

    private void productManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productManagementActionPerformed
        // TODO add your handling code here:
        if (checkLogin() && this.userText.getText().trim().equals("admin")){
            Product p = new Product();
            //ProductCopy p = new ProductCopy();
            Pane.add(p);
            p.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please log into admin first!", 
                    "Login Require", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_productManagementActionPerformed

    private void OrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderActionPerformed
        // TODO add your handling code here:
        Order o = new Order(this.nameLabel.getText(), this.cid, this.addrId);
        Pane.add(o);
        o.setVisible(true);
    }//GEN-LAST:event_OrderActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userButtonActionPerformed
        // TODO add your handling code here:
        if (checkLogin() && !this.userText.getText().trim().equals("Guest")){
            UserProfile up = new UserProfile();
            up.setCid(this.cid);
            //ProductCopy p = new ProductCopy();
            Pane.add(up);
            up.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please log in first!", 
                    "Login Require", JOptionPane.WARNING_MESSAGE);
        }        
    }//GEN-LAST:event_userButtonActionPerformed

    private void customerManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerManagementActionPerformed
        // TODO add your handling code here:
        if (checkLogin() && this.userText.getText().trim().equals("admin")) {
            CustomerManagement cp = new CustomerManagement();
            //ProductCopy p = new ProductCopy();
            Pane.add(cp);
            cp.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please log into admin first!",
                    "Login Require", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_customerManagementActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        RegisterFrame rg = new RegisterFrame();
        Pane.add(rg);
        rg.setVisible(true);
    }//GEN-LAST:event_registerButtonActionPerformed

    private void onSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSaleActionPerformed
        // TODO add your handling code here:
        JPanel myPanel = new JPanel();
        try {
            DBConnection dbc = new DBConnection();
            Connection conn = null;
            Statement stmt = null;
                conn = dbc.connect();
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select * from onSaleView");
            ResultSetMetaData meta = rs.getMetaData();
            Vector<String> columnNames = new Vector<String>();
            int columnCount = meta.getColumnCount();
            for (int i = 1; i <= columnCount; i++) {
                columnNames.add(meta.getColumnName(i));
            }
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while (rs.next()) {
                Vector<Object> vector = new Vector<Object>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }
            DefaultTableModel dtm = new DefaultTableModel(data, columnNames) {
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            JTable table = new JTable(dtm);
            table.setPreferredScrollableViewportSize(new Dimension(1000, 600));
            table.setFillsViewportHeight(true);
            table.getTableHeader().setReorderingAllowed(false);
            dbc.disconnect();
            myPanel.add(new JScrollPane(table));
            //Pane.add(myPanel);
            JOptionPane.showMessageDialog(null, myPanel, "On Sale",
                    JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_onSaleActionPerformed

    private void bwReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwReportActionPerformed
        // TODO add your handling code here:
        JPanel mainPanel = new JPanel();
        JComboBox switcher = new JComboBox(new String[]{"Pizza", "Toppings", "Drink"});
        JPanel cards = new JPanel(new CardLayout());
        JPanel pizzaPanel = new JPanel();
        JPanel toppingPanel = new JPanel();
        JPanel drinkPanel = new JPanel();
        JLabel pizzaBest = new JLabel();
        JLabel pizzaWorst = new JLabel();
        JLabel topBest = new JLabel();
        JLabel topWorst = new JLabel();
        JLabel drinkBest = new JLabel();
        JLabel drinkWorst = new JLabel();
        try {
            DBConnection dbc = new DBConnection();
            Connection conn = dbc.connect();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select pid, name, max(count)"
                    + " from ("
                    + "Select Ordered.pid, Pizza_View.name, count(Ordered.pid) as count"
                    + " from Pizza_View inner join Ordered"
                    + " on Ordered.pid=Pizza_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                pizzaBest.setText("Best: PID: " + rs.getInt("pid")
                        + " name: " + rs.getString("name")
                        + " Number of Sale:" + rs.getInt("max(count)"));
            }
            rs = stmt.executeQuery("Select pid, name, min(count)"
                    + " from ("
                    + "Select Ordered.pid, Pizza_View.name, count(Ordered.pid) as count"
                    + " from Pizza_View inner join Ordered"
                    + " on Ordered.pid=Pizza_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                pizzaWorst.setText("Worst:\nPID: " + rs.getInt("pid")
                        + "\tname: " + rs.getString("name")
                        + "\tNumber of Sale:" + rs.getInt("min(count)"));
            }
            pizzaPanel.add(pizzaBest);
            pizzaPanel.add(pizzaWorst);
            stmt.close();
            dbc.disconnect();
        } catch (Exception e) {

        }
        
        //pizzaPanel.add(new JLabel("Pizza Test"));
        //pizzaPanel.add(new JLabel("Pizza2 Test"));
        cards.add(pizzaPanel, "Pizza");
        try {
            DBConnection dbc = new DBConnection();
            Connection conn = dbc.connect();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select pid, name, max(count)"
                    + " from ("
                    + "Select Ordered.pid, Topping_View.name, count(Ordered.pid) as count"
                    + " from Topping_View inner join Ordered"
                    + " on Ordered.pid=Topping_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                topBest.setText("Best: PID: " + rs.getInt("pid")
                        + " name: " + rs.getString("name")
                        + " Number of Sale:" + rs.getInt("max(count)"));
            }
            rs = stmt.executeQuery("Select pid, name, min(count)"
                    + " from ("
                    + "Select Ordered.pid, Topping_View.name, count(Ordered.pid) as count"
                    + " from Topping_View inner join Ordered"
                    + " on Ordered.pid=Topping_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                topWorst.setText("Worst: PID: " + rs.getInt("pid")
                        + " name: " + rs.getString("name")
                        + " Number of Sale:" + rs.getInt("min(count)"));
            }
            toppingPanel.add(topBest);
            toppingPanel.add(topWorst);
            stmt.close();
            dbc.disconnect();
        } catch (Exception e) {

        }
        //toppingPanel.add(new JLabel("Toppings Test"));
        //toppingPanel.add(new JLabel("Toppings2 Test"));
        cards.add(toppingPanel, "Toppings");
        try {
            DBConnection dbc = new DBConnection();
            Connection conn = dbc.connect();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select pid, name, max(count)"
                    + " from ("
                    + "Select Ordered.pid, Drink_View.name, count(Ordered.pid) as count"
                    + " from Drink_View inner join Ordered"
                    + " on Ordered.pid=Drink_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                drinkBest.setText("Best: PID: " + rs.getInt("pid")
                        + " tname: " + rs.getString("name")
                        + " Number of Sale:" + rs.getInt("max(count)"));
            }
            rs = stmt.executeQuery("Select pid, name, min(count)"
                    + " from ("
                    + "Select Ordered.pid, Drink_View.name, count(Ordered.pid) as count"
                    + " from Drink_View inner join Ordered"
                    + " on Ordered.pid=Drink_View.pid group by Ordered.pid) y");
            while (rs.next()) {
                drinkWorst.setText(" Worst: PID: " + rs.getInt("pid")
                        + " name: " + rs.getString("name")
                        + " Number of Sale:" + rs.getInt("min(count)"));
            }
            drinkPanel.add(drinkBest);
            drinkPanel.add(drinkWorst);
            stmt.close();
            dbc.disconnect();
        } catch (Exception e) {

        }
        drinkPanel.add(new JLabel("Drink Test"));
        drinkPanel.add(new JLabel("Drink2 Test"));
        cards.add(drinkPanel, "Drink");
        switcher.addItemListener(new ItemListener(){

            @Override
            public void itemStateChanged(ItemEvent e) {
                
                CardLayout c1 = (CardLayout)(cards.getLayout());
                c1.show(cards, (String) e.getItem());
            }
            
        });
        mainPanel.add(switcher);
        mainPanel.add(cards);
        JOptionPane.showMessageDialog(null, mainPanel, "Best/Worst Report", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_bwReportActionPerformed
    
    public boolean checkLogin(){
        if (status.equals("Not Log In")){
            nameLabel.setText("Guest");
            return false;
        }
        else{
            nameLabel.setText(this.userText.getText());
            return true;
        }
    }
    
    public static String now() {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        return sdf.format(cal.getTime());
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Order;
    private javax.swing.JDesktopPane Pane;
    private javax.swing.JMenuItem about;
    private javax.swing.JButton bwReport;
    private javax.swing.JMenuItem customerManagement;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton login;
    private javax.swing.JButton logout;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton onSale;
    private javax.swing.JMenu option;
    private javax.swing.JMenuItem productManagement;
    private javax.swing.JButton registerButton;
    private javax.swing.JButton userButton;
    // End of variables declaration//GEN-END:variables
    private String status = "Not Log In";
    private JTextField userText = new JTextField(10);
    private int cid;
    private int addrId;
    public static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
}
