/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pizza;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vincent
 */
public class UserProfile extends javax.swing.JInternalFrame {

    /**
     * Creates new form UserProfile
     */
    public UserProfile() {
        initComponents();
    }
    
    public void setCid(int cid){
        this.cid = cid;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        orderButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Customer Profile");

        jButton1.setText("Edit Profile");

        historyButton.setText("View History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jButton3.setText("View Balance");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        orderButton.setText("View Ordered");
        orderButton.setPreferredSize(new java.awt.Dimension(95, 23));
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(historyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(orderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DBConnection dbc = new DBConnection();
        try{
            Connection conn = dbc.connect();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select Account.payment, "
                    + "Account.balance from Account inner join Customers "
                    + "on Account.aid = Customers.account "
                    + "where Customers.cid=" + "" + this.cid);
            if(rs.next()){
                JOptionPane.showMessageDialog(null, 
                        "Payment: " + rs.getString("payment") + " Balance: " 
                        + rs.getInt("balance"), "Balance", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, 
                        "You don't have any account", "Balance", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
            dbc.disconnect();
        }catch (ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(null, e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        // TODO add your handling code here:
        JTextField xField = new JTextField(5);
        JTextField yField = new JTextField(5);

        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("From:"));
        myPanel.add(xField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        myPanel.add(new JLabel("To:"));
        myPanel.add(yField);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Order Date Range(yyyy-mm-dd)", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                if (dbc.getConnectStatus() == DISCONNECTED) {
                    conn = dbc.connect();
                    dbc.setConnectStatus(CONNECTED);
                }
                stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT  "
                        + "`orderId` ,  `pid` ,  `DlvTime` ,  `price` ,  "
                        + "`standing_status` ,  `active` \n" + "FROM Ordered\n" 
                        + "WHERE DlvTime between '"+xField.getText() 
                        + "' and '" + yField.getText()+"' and cid=" + cid);
                ResultSetMetaData meta = rs.getMetaData();
                Vector<String> columnNames = new Vector<String>();
                int columnCount = meta.getColumnCount();
                for (int i = 1; i <= columnCount; i++) {
                    columnNames.add(meta.getColumnName(i));
                }
                Vector<Vector<Object>> data = new Vector<Vector<Object>>();
                while (rs.next()) {
                    Vector<Object> vector = new Vector<Object>();
                    for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                        vector.add(rs.getObject(columnIndex));
                    }
                    data.add(vector);
                }
                DefaultTableModel dtm = new DefaultTableModel(data, columnNames){
                    public boolean isCellEditable(int row, int column){
                        return false;
                    }
                };
                JTable table = new JTable(dtm);
                table.setPreferredScrollableViewportSize(new Dimension(1000, 600));
                table.setFillsViewportHeight(true);
                table.getTableHeader().setReorderingAllowed(false);
                dbc.disconnect();
                dbc.setConnectStatus(DISCONNECTED);
                JScrollPane pane = new JScrollPane(table);
                JPanel panel = new JPanel();
                panel.add(pane);
                JOptionPane.showMessageDialog(null, panel, "History",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            catch (Exception e){
                System.err.println("ENIMP: " );
                e.printStackTrace();
            }
      }
    }//GEN-LAST:event_historyButtonActionPerformed

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (dbc.getConnectStatus() == DISCONNECTED) {
                conn = dbc.connect();
                dbc.setConnectStatus(CONNECTED);
            }
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("Select orderId, pid, amount, "
                    + "DlvTime, price from Ordered where cid=" + this.cid);
            ResultSetMetaData meta = rs.getMetaData();
            Vector<String> columnNames = new Vector<String>();
            int columnCount = meta.getColumnCount();
            for (int i = 1; i <= columnCount; i++) {
                columnNames.add(meta.getColumnName(i));
            }
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while (rs.next()) {
                Vector<Object> vector = new Vector<Object>();
                for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                    vector.add(rs.getObject(columnIndex));
                }
                data.add(vector);
            }
            DefaultTableModel dtm = new DefaultTableModel(data, columnNames) {
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            JTable table = new JTable(dtm);
            table.setPreferredScrollableViewportSize(new Dimension(1000, 600));
            table.setFillsViewportHeight(true);
            table.getTableHeader().setReorderingAllowed(false);
            dbc.disconnect();
            dbc.setConnectStatus(DISCONNECTED);
            JScrollPane pane = new JScrollPane(table);
            JPanel panel = new JPanel();
            panel.add(pane);
            JOptionPane.showMessageDialog(null, panel, "Ordered",
                    JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_orderButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton historyButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton orderButton;
    // End of variables declaration//GEN-END:variables
    private int cid;
    private final int CONNECTED = 1;
    private final int DISCONNECTED = 0;
    private DBConnection dbc = new DBConnection();
    private Connection conn = null;
    private Statement stmt = null;
}
